/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'co.riiid.gradle' version '0.4.2'
}

apply plugin: 'java'

def gitRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-n", "1", "--format=%H"
    standardOutput = hashStdOut
  }

  return hashStdOut.toString().trim()
}

def releaseRevision = { ->
  def hashStdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "--pretty=format:"
    standardOutput = hashStdOut
  }

  return hashStdOut.size().toString()
}

def PLUGIN_VERSION = '2.0.0'
def DIST_VERSION = releaseRevision()
def GIT_REVISION = gitRevision()

group = 'cd.go'
rootProject.ext.distVersion = DIST_VERSION
rootProject.ext.fullVersion = DIST_VERSION ? "${PLUGIN_VERSION}-${DIST_VERSION}" : PLUGIN_VERSION
rootProject.ext.gitRevision = GIT_REVISION
version = project.fullVersion

project.ext.pluginDesc = [
  id         : 'cd.go.authentication.ldap',
  version    : project.fullVersion,
  goCdVersion: '17.5.0',
  name       : 'LDAP Authentication Plugin for GoCD',
  description: 'LDAP Authentication Plugin for GoCD',
  vendorName : 'GoCD Contributors',
  vendorUrl  : 'https://github.com/gocd/gocd-ldap-authentication-plugin'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
  mavenLocal()
}

sourceSets {
  test {
    java {
      compileClasspath += configurations.compileOnly
      runtimeClasspath += configurations.compileOnly
    }
  }

  integrationTest {
    java.srcDirs = ['src/integration']
    resources.srcDirs += ['src/testdata']
    compileClasspath += main.output + configurations.compileOnly
    runtimeClasspath += main.output + configurations.compileOnly
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '17.3.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

  testCompile group: 'cd.go.plugin', name: 'go-plugin-api', version: '17.3.0'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.25.1'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.4.0'

  integrationTestCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
  integrationTestCompile group: 'org.apache.directory.server', name: 'apacheds-all', version: '2.0.0-M24'
}

tasks.withType(Test) { testTask ->

  testLogging {
    showStandardStreams = true

    exceptionFormat 'full'

    beforeSuite { suite ->
      if (suite.parent) {
        logger.quiet("Running ${suite.name}")
      }
    }

    afterSuite { suite, result ->
      if (suite.parent) {
        logger.quiet("Tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
        if (result.resultType == TestResult.ResultType.FAILURE) {
          logger.quiet("Test ${suite.name} FAILED")
        }
      } else {
        logger.quiet("Total tests run: ${result.testCount}, Failures: ${result.failedTestCount}, Skipped: ${result.skippedTestCount}, Time elapsed: ${(result.endTime - result.startTime) / 1000.00} sec")
      }
    }
  }
}

task integrationTest(type: Test, description: 'Runs the ldap integration tests.', group: 'Verification') {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath

  mustRunAfter tasks.test
}

check.dependsOn integrationTest

processResources {
  from("src/main/resource-templates") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }

    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }
}

jar { jarTask ->
  preserveFileTimestamps = false
  reproducibleFileOrder = true

  ['MD5', 'SHA1', 'SHA-256'].each { algo ->
    jarTask.outputs.files("${jarTask.archivePath}.${algo}")
    jarTask.doLast {
      ant.checksum file: jarTask.archivePath, format: 'MD5SUM', algorithm: algo
    }
  }

  manifest {
    attributes(
      'Go-Version': project.pluginDesc.goCdVersion,
      'Plugin-Revision': project.pluginDesc.version,
      'Implementation-Title': project.name,
      'Implementation-Version': project.version,
      'Source-Compatibility': project.sourceCompatibility,
      'Target-Compatibility': project.targetCompatibility
    )
  }

  from(configurations.compile) {
    into "lib/"
  }

//    This is useful for debugging
//  from(sourceSets.main.java) {
//    into "/"
//  }
}

github {
  owner = System.getenv('GITHUB_USER') ?: 'bob'
  repo = 'gocd-ldap-authentication-plugin'
  token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
  tagName = PLUGIN_VERSION
  name = PLUGIN_VERSION
  targetCommitish = project.gitRevision
  body = """
      # Version ${fullVersion}

      See release notes at https://github.com/${github.owner}/${github.repo}/blob/master/CHANGELOG.md#${github.tagName.replaceAll(/[^A-Za-z0-9]/, '')}
    """.stripIndent().trim()

  assets = jar.outputs.files.files
}
